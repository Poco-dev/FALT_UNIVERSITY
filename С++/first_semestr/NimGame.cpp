#include <iostream>
#include <random>
#include <vector>
using namespace std;

void init_func();
int randomaizer();
vector<int> generate_heaps();
void single_game();
void nim_game();
int computer_move_single(int stones);
int player_move_single(int stones);
vector<int> computer_move_nim(vector<int> heaps);
vector<int> player_move_nim(vector<int> heaps);
void print_heaps(const vector<int>& heaps);

constexpr int heaps_count{3};
const string stone_img{"ü™®"};

int main() {
    init_func();
    cout << "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:" << endl;
    cout << "1 - –û–¥–Ω–∞ –∫—É—á–∞ (–ø—Ä–æ—Å—Ç–æ–π –ù–∏–º)" << endl;
    cout << "2 - –¢—Ä–∏ –∫—É—á–∏ (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ù–∏–º)" << endl;

    char choice{'0'};
    cin >> choice;

    if (choice == '1') {
        single_game();
    } else if (choice == '2') {
        nim_game();
    }
    return 0;
}
//—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –æ—Ç 5 –¥–æ 10
int randomaizer() {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<int> dis(5, 10);
    return dis(gen);
}
//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –ö–∏—Ä–∏–ª–ª–∏—Ü—É(—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
void init_func() {
    system("chcp 65001>nul");
}
//–∏–≥—Ä–∞ –Ω–∞ 1 –∫—É—á—É
void single_game() {
    int stones_count = randomaizer();
    bool player_move = false;

    cout << "–ö—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º?" << "\n" << "–í—ã?(y/n)" << endl;
    string word{"123"};
    cin >> word;

    if (tolower(word[0]) == 'y')
        player_move = true;

    cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π –≤ –∫—É—á–µ: " << endl;
    for (int i{0}; i < stones_count; ++i) {
        cout << stone_img;
    }
    cout << endl;

    while (stones_count > 0) {
        if (player_move) {
            stones_count = player_move_single(stones_count);
            for (int i{0}; i < stones_count; ++i) {
                cout << stone_img;
            }
            cout << endl;
        } else {
            stones_count = computer_move_single(stones_count);
            cout << "–í –∫—É—á–µ –æ—Å—Ç–∞–ª–æ—Å—å " << stones_count << " –∫–∞–º–Ω–µ–π" << endl;
            for (int i{0}; i < stones_count; ++i) {
                cout << stone_img;
            }
            cout << endl;
        }

        if (stones_count == 0) {
            if (player_move) {
                cout << "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! –£—Ä–∞!" << endl;
            } else {
                cout << "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!" << endl;
            }
            break;
        }

        player_move = !player_move;
    }
}
//—Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –≤ –∏–≥—Ä–µ –Ω–∞ 1 –∫—É—á—É
int computer_move_single(int stones) {
    int taked_stones = stones % 4;
    if (taked_stones == 0) {
        taked_stones = 1;
    }

    cout << "–ö–æ–º–ø—å—é—Ç–µ—Ä –≤–∑—è–ª " << taked_stones << " –∫–∞–º–Ω–µ–π" << endl;
    return stones - taked_stones;
}
//—Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ –Ω–∞ 1 –∫—É—á—É
int player_move_single(int stones) {
    int choose_count{0};
    cout << "–í–∞—à —Ö–æ–¥. –°–∫–æ–ª—å–∫–æ –∫–∞–º–Ω–µ–π –≤–æ–∑—å–º–µ—Ç–µ? (1-" << min(3,stones) << ")"<< endl;

    while (cin >> choose_count &&
        (choose_count < 1 || choose_count > 3 || choose_count > stones))
    {
        cerr << "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ (1-" << min(3,stones) << "):" << endl;
    }

    return stones - choose_count;
}
//–∏–≥—Ä–∞ –Ω–∞ 3 –∫—É—á–∏
void nim_game() {
    vector<int> heaps = generate_heaps();
    bool player_move = false;

    cout << "–ö—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º?" << "\n" << "–í—ã?(y/n)" << endl;
    string word;
    cin >> word;

    if (word == "y" || word == "Yes" || word == "yes" || word == "Y")
        player_move = true;

    cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π –≤ –∫—É—á–∞—Ö: " << endl;
    print_heaps(heaps);

    while (true) {
        if (player_move) {
            heaps = player_move_nim(heaps);
            cout << "–û—Å—Ç–∞–ª–æ—Å—å –∫–∞–º–Ω–µ–π: " << endl;
            print_heaps(heaps);
        } else {
            heaps = computer_move_nim(heaps);
            cout << "–û—Å—Ç–∞–ª–æ—Å—å –∫–∞–º–Ω–µ–π: " << endl;
            print_heaps(heaps);
        }

        if (heaps[0] == 0 && heaps[1] == 0 && heaps[2] == 0) {
            if (player_move) {
                cout << "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! –£—Ä–∞!" << endl;
            } else {
                cout << "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!" << endl;
            }
            break;
        }

        player_move = !player_move;
    }
}
//–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 3–∫—É—á
vector<int> generate_heaps() {
    vector<int> heaps(heaps_count);
    for (int i{0}; i < heaps_count; ++i) {
        heaps[i] = randomaizer();
    }
    return heaps;
}
//—Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –≤ –∏–≥—Ä–µ –Ω–∞ 3 –∫—É—á–∏(XOR-–ê–ª–≥–æ—Ä–∏—Ç–º)
vector<int> computer_move_nim(vector<int> heaps) {
    int nim_sum = heaps[0] ^ heaps[1] ^ heaps[2];
    if (nim_sum == 0) {
        for (int i{0}; i < heaps_count; ++i) {
            if (heaps[i] > 0) {
                heaps[i] = max(0, heaps[i] - 1);
                cout << "–ö–æ–º–ø—å—é—Ç–µ—Ä –≤–∑—è–ª 1 –∫–∞–º–µ–Ω—å –∏–∑ –∫—É—á–∏ " << i + 1 << endl;
                return heaps;
            }
        }
    }
    for (int i{0}; i < heaps_count; ++i) {
        if (const int target = heaps[i] ^ nim_sum; target < heaps[i]) {
            const int take = heaps[i] - target;
            heaps[i] = target;
            cout << "–ö–æ–º–ø—å—é—Ç–µ—Ä –≤–∑—è–ª " << take << " –∫–∞–º–Ω–µ–π –∏–∑ –∫—É—á–∏ " << i + 1 << endl;
            return heaps;
        }
    }

    return heaps;
}
//–•–æ–¥ –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä–µ –Ω–∞ 3 –∫—É—á–∏
vector<int> player_move_nim(vector<int> heaps) {
    unsigned int heap_num{}, take_count{};

    cout << "–í–∞—à —Ö–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—á—É (1-3):" << endl;
    cin >> heap_num;

    while (heap_num < 1 || heap_num > 3 || heaps[heap_num - 1] == 0) {
        cerr << "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫—É—á–∞. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ (1-3):" << endl;
        cin >> heap_num;
    }

    cout << "–°–∫–æ–ª—å–∫–æ –∫–∞–º–Ω–µ–π –≤–æ–∑—å–º–µ—Ç–µ –∏–∑ –∫—É—á–∏ " << heap_num << "? (1-" << heaps[heap_num - 1] << ")" << endl;
    cin >> take_count;

    while (take_count < 1 || take_count > heaps[heap_num - 1]) {
        cerr << "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:";
        cin >> take_count;
    }

    heaps[heap_num - 1] -= take_count;
    return heaps;
}
//–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞–º–Ω–µ–π(–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ debug)
void print_heaps(const vector<int>& heaps) {
    for (int i{0}; i < heaps_count; ++i) {
        cout << "(" << heaps[i] << ")";
        for (int j{0}; j<heaps[i]; ++j) {
            cout << " ü™® ";
        }
        cout << endl;
    }
}